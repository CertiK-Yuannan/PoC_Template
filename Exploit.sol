//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "hardhat/console.sol";
import "./Setup.sol";

contract Test{

}

contract Exploit {
    event ShowResult(bool success, bytes result);
    event DeployedContract(address new_contract);
    event CheckAddressValue(address test);
    event CheckBoolValue(bool success); 

    constructor(){
        
    }

    function attack() public payable{
        // ----------------------------------
        // Deploy to private blockchain 
        // (console.log works here)
        // For config.yml:
        //   Set `isForking` to '1'
        //   Set `url` to infura's URL
        //   Set correct solidity version
        //   Set `blockNumber` to '0'
        //   Set `privateKey` to ''
        // ----------------------------------

        // Setup setup = (new Setup).value(50 ether)();
        // bool result = setup.isSolved();
        // require(result, 'Not Solved');



        // ----------------------------------
        // Attack to blockchain and get flag 
        // (console.log doesn't work here, try to emit event to debug)
        // For config.yml
        //  Set `isForking` to '0'
        //  Set `url` to the url given by server
        //  Set correct solidity version
        //  Set `blockNumber` to  '0'
        //  Set `privateKey` to the private key given by server
        // ----------------------------------

          // address addr = 0xB91D01992bd59Ce59Bd0aFd9B4a86CEF37dCF13c;
        // Setup setup = Setup(addr);
        
        // bool result = setup.isSolved();
        // require(result, 'Not Solved');
    }    
}
