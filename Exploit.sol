//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "hardhat/console.sol";

import "./PancakeSwap/IERC20.sol";
import "./PancakeSwap/IPancakeRouter02.sol";
import "./PancakeSwap/IPancakePair.sol";
import "./PancakeSwap/IWETH.sol";

contract Exploit {
    event ShowResult(bool success, bytes result); 

    constructor(){
        
    }

    function executeAnyFunction() public {
        address addr = 0x9253283738a8A4634859fd4c29CEB05F5601E222;
        (bool success, bytes memory result)= addr.call(abi.encodeWithSignature("challenge()"));
        // Call with bytes4 only
        // (bool success, bytes memory result) = addr.call(bytes4(keccak256("setA(uint256)")),_val)
        
        // Call with ether
        // (bool success, bytes memory result) = addr.call{value: 1 ether}(abi.encodeWithSignature("myFunction(uint,address)", 10, msg.sender));
        
        // Show result
        emit ShowResult(success, result);
    }

    function attack() public payable{
        //wbnb.deposit{value: msg.value}();
    }    
}
