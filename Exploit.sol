//SPDX-License-Identifier: Unlicense
pragma solidity 0.4.24;

import "hardhat/console.sol";
import "./Setup.sol";

contract Test{

}

contract Exploit {
    event ShowResult(bool success, bytes result);
    event DeployedContract(address new_contract);
    event CheckAddressValue(address test);
    event CheckBoolValue(bool success); 

    constructor(){
        
    }

    function test() public payable{
        // ----------------------------------
        // Deploy to private blockchain 
        // (console.log works here)
        // For config.yml:
        //   Set `isForking` to '1'
        //   Set `url` to infura's URL
        //   Set correct solidity version
        //   Set `blockNumber` to '0'
        //   Set `privateKey` to ''
        // ----------------------------------
        
        // For Old Solidity version
        Setup setup = (new Setup).value(50 ether)();
        // Current Version
        // Setup setup = (new Setup){value: 50 ether}();
        
        //TODO: Solution
        
        //
        
        bool result = setup.isSolved();
        require(result, 'Not Solved');

    }

    function attack() public payable{
        // ----------------------------------
        // Attack to blockchain and get flag 
        // (console.log doesn't work here, try to emit event to debug)
        // For config.yml
        //  Set `isForking` to '0'
        //  Set `url` to the url given by server
        //  Set correct solidity version
        //  Set `blockNumber` to  '0'
        //  Set `privateKey` to the private key given by server
        // ----------------------------------

        address addr = 0xfEcA43eB430B4Cf71df25675dc88EB96420fEF0f;
        Setup setup = Setup(addr);

        //TODO: Solution

        //
        
        bool result = setup.isSolved();
        require(result, 'Not Solved');
    }    
}
